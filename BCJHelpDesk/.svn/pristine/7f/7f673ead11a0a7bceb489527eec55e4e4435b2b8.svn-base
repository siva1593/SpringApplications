package com.crmindz.bcjmay2017.dao;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.crmindz.bcjmay2017.pojo.Login;
import com.crmindz.bcjmay2017.pojo.Ticket;
import com.crmindz.bcjmay2017.pojo.User;

@Repository
public class HelpDeskDAOImpl implements HelpDeskDAO {

	/*
	 * private DataSource dataSource;
	 * 
	 * public void setDataSource(DataSource dataSource) { this.dataSource =
	 * dataSource; }
	 */
	@Autowired
	JdbcTemplate jdbcTemplate;
	@Autowired
	JdbcOperations jdbcOperations;
	private static final Logger logger = Logger.getLogger(HelpDeskDAOImpl.class);

	public String saveUser(User user) {

		logger.info("in dao class, saveUser method");

		String query = "insert into user_details (firstName, lastName,email,phone) values (?,?,?,?)";
		Object[] args = new Object[] { user.getFirstName(), user.getLastName(), user.getEmail(),
				user.getPhone() };
		
		int count=0;
		try{
		count = jdbcOperations.update(query, args);
		}catch(Exception e)
		{
			return "emailExist";
		}
		if (0 != count) {
			logger.info("user details inserted successfully");
			String query1 = "select user_id from user_details where firstName=?&&lastName=?&&email=?&&phone=?";
			
			int userId = jdbcTemplate.queryForObject(query1,
					new Object[] { user.getFirstName(), user.getLastName(), user.getEmail(),user.getPhone() },
					Integer.class);
			
			if (0 != userId) {
				user.setUserId(userId);
				logger.info("User Id is " + user.getUserId());
				String query2 = "insert into login_details (username,password,usertype,user_id) values (?,?,?,?)";
				Object[] args1 = new Object[] { user.getLogin().getEmail(), user.getLogin().getPassword(), user.getLogin().getUserType(),user.getUserId() };
				if (0 != jdbcOperations.update(query2, args1)) {
					logger.info("login details inserted successfully");
						String query3 = "insert into address (addressline1, addressline2, city, state, zipcode, user_id) values (?,?,?,?,?,?)";
						Object[] args2 = new Object[] { user.getAddress().getAddressLine1(),
								user.getAddress().getAddressLine2(), user.getAddress().getCity(),
								user.getAddress().getState(), user.getAddress().getZipCode(), user.getUserId() };
						if (0 != jdbcTemplate.update(query3, args2)) {
							logger.info("Address details inserted successfully");
							return "success";
						} else {
							return "failure";
						}
				}
			}
		} 

		return null;
	}

	public User verifyUser(User user) {
		logger.info("In dao class, verifyUser method");
		String query = "select * from login_details where username = ? && password = ?";

		logger.info(user.getLogin().getPassword());
		logger.info(user.getLogin().getEmail());
		try {
			Login login = (Login)jdbcTemplate.queryForObject(query, new Object[] { user.getLogin().getEmail(), user.getLogin().getPassword() },
					new BeanPropertyRowMapper<Login>(Login.class));
			logger.info(login.getPassword());
				String query1 = "select * from user_details where user_id = ?";
				User userDB = (User) jdbcTemplate.queryForObject(query1, new Object[] { login.getUserId() },
						new BeanPropertyRowMapper<User>(User.class));
				logger.info("user Id" + userDB.getUserId());
				logger.info("first name" + userDB.getFirstName());
				logger.info("last name" + userDB.getLastName());
				userDB.setLogin(login);
				return userDB;
		} catch (EmptyResultDataAccessException e) {
			logger.info("exception is handled");
			return null;
		}catch (java.lang.NullPointerException e) {

			logger.info("Null pointer Exception handled correctly");
			return null;
		}

	}

	
	public List<String> getUserType() {

		String query = "select name from usertype";
		List<Map<String, Object>> userType = jdbcTemplate.queryForList(query);
		List<String> listOfValue = new ArrayList<String>();
		for (Map<String, Object> map : userType) {
			for (Map.Entry<String, Object> entry : map.entrySet()) {
//				 logger.info(entry.getKey() + " - " + entry.getValue()); 
				listOfValue.add((String) entry.getValue());
			}
		}

		return (List<String>) listOfValue;
	}


	public List<String> getStates() {

		String query = "select state_name from state";
		List<Map<String, Object>> userType = jdbcTemplate.queryForList(query);
		List<String> listOfValue = new ArrayList<String>();
		for (Map<String, Object> map : userType) {
			for (Map.Entry<String, Object> entry : map.entrySet()) {
//				 logger.info(entry.getKey() + " - " + entry.getValue()); 
				listOfValue.add((String) entry.getValue());

			}
		}

		return (List<String>) listOfValue;
	}

	
public List<String> getTicketCategoryInfo() {

	String query = "select categoryName from category";
	List<Map<String, Object>> userType = jdbcTemplate.queryForList(query);
	List<String> listOfValue = new ArrayList<String>();
	for (Map<String, Object> map : userType) {
		for (Map.Entry<String, Object> entry : map.entrySet()) {
			 logger.info(entry.getKey() + " - " + entry.getValue()); 
			listOfValue.add((String) entry.getValue());

		}
	}

	return (List<String>) listOfValue;
}

public List<String> getTicketSubCategoryInfo(String ticketCategoryName) {

	logger.info("In dao class, verifyUser method");
	String query = "select category_id from category where categoryName = ?";

	int categoryId = 0;
	try {
		categoryId = jdbcTemplate.queryForObject(query, new Object[] { ticketCategoryName },
				Integer.class);
		if (0 != categoryId) {
			String query1 = "select subcategoryName from subcategory where category_id = ?";
			List<Map<String, Object>> userType = jdbcTemplate.queryForList(query1, new Object[] { categoryId });
			List<String> listOfValue = new ArrayList<String>();
				for (Map<String, Object> map : userType) {
						for (Map.Entry<String, Object> entry : map.entrySet()) {
							//			 logger.info(entry.getKey() + " - " + entry.getValue()); 
								listOfValue.add((String) entry.getValue());

							}
					}
				return (List<String>) listOfValue;
		}
	
	}catch (EmptyResultDataAccessException e) {
		logger.info("exception is handled");
	}
	return null;
}

public boolean saveTicket(Ticket ticket, int userId) {
	
	logger.info("in dao class, saveTicket method");
	logger.info(ticket.getSubCategory()+"  "+ticket.getDescription());

	String query = "insert into ticket (ticketNo, category,subCategory,description,subject,status,comments,user_id) values (?,?,?,?,?,?,?,?)";
	Object[] args = new Object[] { ticket.getTicketNo(),ticket.getCategory(),ticket.getSubCategory(),ticket.getDescription(),ticket.getSubject(),ticket.getStatus(),ticket.getComments(),userId };
	if (0 != jdbcOperations.update(query, args)) {
		logger.info("user details inserted successfully");
		return true;
	}
	else{
	return false;
	}
}

public List<Ticket> getTicketsListByUserId(int user_Id) {

	logger.info("getTicketmethod");
	
	String query = "select ticketNo,category,subCategory,description,subject,status,comments from ticket where user_id = ?";

	// using RowMapper anonymous class, we can create a separate RowMapper
	// for reuse

	List<Map<String,Object>> rows = jdbcTemplate.queryForList(query,new Object[] { user_Id });
	List<Ticket> userTickets = new ArrayList<Ticket>();

	for (Map<String,Object> row : rows) {
		Ticket ticket = new Ticket();
		
		ticket.setTicketNo((Integer)(row.get("ticketNo")));
		System.out.println(row.get("ticketNo"));
		ticket.setCategory((String)row.get("category"));
		ticket.setSubCategory((String)row.get("subCategory"));
		ticket.setDescription((String)row.get("description"));
		ticket.setSubject((String)row.get("subject"));
		ticket.setStatus((String)row.get("status"));
		ticket.setComments((String)row.get("comments"));
		userTickets.add(ticket);
		
	}
		
	System.out.println("dao ticket data");
	if(!userTickets.isEmpty())
	{
		System.out.println(userTickets.get(0).getCategory());
	}
	
	return userTickets;
}


public List<Ticket> fetchNewTickets() {
logger.info(" In DAO, fetchTicketmethod");
	
	String query = "select ticketNo,category,subCategory,description,subject,status,comments from ticket where status = 'Pending'";

	// using RowMapper anonymous class, we can create a separate RowMapper
	// for reuse

	List<Map<String,Object>> rows = jdbcTemplate.queryForList(query);
	List<Ticket> newTickets = new ArrayList<Ticket>();

	for (Map<String,Object> row : rows) {
		Ticket ticket = new Ticket();
		
		ticket.setTicketNo((Integer)(row.get("ticketNo")));
		System.out.println(row.get("ticketNo"));
		ticket.setCategory((String)row.get("category"));
		ticket.setSubCategory((String)row.get("subCategory"));
		ticket.setDescription((String)row.get("description"));
		ticket.setSubject((String)row.get("subject"));
		ticket.setStatus((String)row.get("status"));
		ticket.setComments((String)row.get("comments"));
		newTickets.add(ticket);
		
	}
		
	if(!newTickets.isEmpty())
	{
		System.out.println(newTickets.get(0).getStatus());
	}
	
	return newTickets;
}


public List<Ticket> fetchApprovedTickets() {
logger.info("In  DAO, fetchApprovedTicketmethod");
	
	String query = "select ticketNo,category,subCategory,description,subject,status,comments from ticket where status = 'Approved'";

	// using RowMapper anonymous class, we can create a separate RowMapper
	// for reuse

	List<Map<String,Object>> rows = jdbcTemplate.queryForList(query);
	List<Ticket> approvedTickets = new ArrayList<Ticket>();

	for (Map<String,Object> row : rows) {
		Ticket ticket = new Ticket();
		
		ticket.setTicketNo((Integer)(row.get("ticketNo")));
		System.out.println(row.get("ticketNo"));
		ticket.setCategory((String)row.get("category"));
		ticket.setSubCategory((String)row.get("subCategory"));
		ticket.setDescription((String)row.get("description"));
		ticket.setSubject((String)row.get("subject"));
		ticket.setStatus((String)row.get("status"));
		ticket.setComments((String)row.get("comments"));
		approvedTickets.add(ticket);
		
	}
		
	if(!approvedTickets.isEmpty())
	{
		System.out.println(approvedTickets.get(0).getStatus());
	}
	
	return approvedTickets;
}


public List<Ticket> fetchDeniedTickets() {
logger.info("In DAO, fetchDeniedTicketmethod");
	
	String query = "select ticketNo,category,subCategory,description,subject,status,comments from ticket where status = 'Denied'";

	// using RowMapper anonymous class, we can create a separate RowMapper
	// for reuse

	List<Map<String,Object>> rows = jdbcTemplate.queryForList(query);
	List<Ticket> deniedTickets = new ArrayList<Ticket>();

	for (Map<String,Object> row : rows) {
		Ticket ticket = new Ticket();
		
		ticket.setTicketNo((Integer)(row.get("ticketNo")));
		System.out.println(row.get("ticketNo"));
		ticket.setCategory((String)row.get("category"));
		ticket.setSubCategory((String)row.get("subCategory"));
		ticket.setDescription((String)row.get("description"));
		ticket.setSubject((String)row.get("subject"));
		ticket.setStatus((String)row.get("status"));
		ticket.setComments((String)row.get("comments"));
		deniedTickets.add(ticket);
		
	}
		
	if(!deniedTickets.isEmpty())
	{
		System.out.println(deniedTickets.get(0).getStatus());
	}
	
	return deniedTickets;
}

public boolean approveTicket(Ticket ticket, int userId) {
	logger.info("in dao class, approveTicket method");
	logger.info(ticket.getStatus()+"  "+ticket.getComments());

	String query = "update ticket set status = ? ,comments = ? where ticketNo = ?";
	Object[] args = new Object[] { ticket.getStatus(),ticket.getComments(),ticket.getTicketNo() };
	if (0 != jdbcOperations.update(query, args)) {
		logger.info("tickets details updated successfully in approve method");
		return true;
	}
	else{
	return false;
	}
}

public boolean rejectTicket(Ticket ticket, int userId) {
	logger.info("in dao class, rejectTicket method");
	logger.info(ticket.getSubCategory()+"  "+ticket.getDescription());

	String query = "update ticket set status = ? ,comments = ? where ticketNo = ?";
	Object[] args = new Object[] { ticket.getStatus(),ticket.getComments(),ticket.getTicketNo() };
	if (0 != jdbcOperations.update(query, args)) {
		logger.info("ticket details updated successfully in reject method");
		return true;
	}
	else{
	return false;
	}
}

}
